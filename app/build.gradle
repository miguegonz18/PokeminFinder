apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "com.bytemain.pokemonfinder"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            //shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // APK splitting
    splits {
        abi {
            // Enable APK splitting wrt architecture
            enable true

            // Reset the architectures for which you need to build the APKs for
            reset()

            // Include the architectures for which Gradle is building APKs
            include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'

            // Set this to false if you don't want an APK that has native code for all architectures
            universalApk true
        }
    }

    // Assign codes to each architecture
    project.ext.versionCodes = ['x86': 0, 'x86_64': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3]

    // Add the architecture-specific codes above to base version code, i.e. the version code specified in the defaultConfig{} block
    // Example: 2000 is the base version code -> 2000 (x86), 2001 (x86_64), 2002 (armeabi-v7a) & 2003 (arm64-v8a) would be the version codes for the generated APK files
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride = project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1 + android.defaultConfig.versionCode
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // UI
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:design:$support_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Extension Realm
    implementation "com.github.vicpinm:krealmextensions:2.4.0"

    // RX
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // CircleImageView
    implementation "de.hdodenhof:circleimageview:$circleimageview_version"

    // Unit Testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.nhaarman:mockito-kotlin:$mockito_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"

    // Instrumentation Testing
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:$espresso_version") {
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }

    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espresso_version"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    androidTestImplementation "com.android.support.test:runner:$testrunner_version"
}
